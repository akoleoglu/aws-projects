AWSTemplateFormatVersion: 2010-09-09
Description: >-

  AWS CloudFormation Sample Template ELBWithLockedDownAutoScaledInstances:
  Create a load balanced, Auto Scaled sample website where the instances are
  locked down to only accept traffic from the load balancer. This example
  creates an Auto Scaling group behind a load balancer with a simple health
  check. The web site is available on port 80, however, the instances can be
  configured to listen on any port (8888 by default). **WARNING** This template
  creates one or more Amazon EC2 instances and an Application Load Balancer. You
  will be billed for the AWS resources used if you create a stack from this
  template.
Resources:
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '2'
      MinSize: '1'
      MaxSize: '3'
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfig
      AvailabilityZones: 
        !GetAZs ""
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: !Sub 'Web Server of ${AWS::StackName} Stack'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-02354e95b39ca8dec
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: t2.micro
      UserData: !Base64 >
        #! /bin/bash

        yum update -y

        yum install httpd -y

        FOLDER="https://raw.githubusercontent.com/akoleoglu/aws-projects/master/project-1-CF-EC2-SG-Static-Web/v2/static-web/"

        curl -s --create-dirs -o "/var/www/html/index.html" -L 
        "$FOLDER"index.html

        curl -s --create-dirs -o "/var/www/html/cat0.jpg" -L  "$FOLDER"cat0.jpg

        curl -s --create-dirs -o "/var/www/html/cat1.jpg" -L  "$FOLDER"cat1.jpg

        curl -s --create-dirs -o "/var/www/html/cat2.jpg" -L  "$FOLDER"cat2.jpg

        systemctl start httpd

        systemctl enable httpd
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - subnet-4ab47e2c
        - subnet-dd69b8fc
        - subnet-561d871b
        - subnet-7324f32c
        - subnet-ef574ed1
        - subnet-4454d84a
      Type: application
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: vpc-eee20493
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
        - SourceSecurityGroupName: ALBSecGroup
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      GroupName: ALBSecGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: vpc-eee20493
Outputs:
  URL:
    Description: URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName